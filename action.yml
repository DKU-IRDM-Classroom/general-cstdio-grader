name: "general-cstdio-grader"
description: "General C Standard I/O Grader"
author: "DKU-IRDM-Classroom"

inputs:
  module-path:
    required: true
  total-cases:
    required: true
  time-limit:
    required: false
    default: 2
  memory-limit:
    required: false
    default: '256m'
  output-limit:
    required: false
    default: 1048576

permissions:
  contents: read
  actions: read
  checks: write

runs:
  using: "composite"
  steps:

    - name: 채점기 준비
      id: prepare-grader
      shell: bash
      run: |
        : 채점기 준비
        set -euo pipefail

        mkdir -p "$HOME/workdir"
        chmod 777 "$HOME/workdir"

    - name: 빌드 준비
      id: prepare-build
      shell: bash
      run: |
        : 빌드 준비
        set -euo pipefail

        if [ ! -f ./main.c ]; then
          echo "::notice::형식 오류: main.c 파일 없음"
          echo "::notice::Points 0/${{ inputs.total-cases }}"
          exit 2
        fi

        command -v docker >/dev/null
        docker pull -q gcc:13 >/dev/null

    - name: 빌드
      id: build
      shell: bash
      run: |
        : 빌드
        set -euo pipefail

        cp ./main.c "$HOME/workdir/"

        docker run --rm \
          --pull=never \
          --network none \
          --cpus "1.0" \
          --memory "${{ inputs.memory-limit }}" \
          --memory-swap "${{ inputs.memory-limit }}" \
          --pids-limit "128" \
          --cap-drop ALL \
          --security-opt no-new-privileges \
          --tmpfs /tmp:rw,nosuid,nodev,noexec,size=64m \
          -u "$(id -u):$(id -g)" \
          -v "$HOME/workdir":/workdir \
          -w /workdir \
          gcc:13 \
          bash -lc '
            set -euo pipefail;
            if gcc -O2 -std=c17 -o main main.c >/dev/null 2>/tmp/gcc.err; then
              exit 0
            else
              echo "::notice::컴파일 오류"
              echo "::notice::Points 0/${{ inputs.total-cases }}"
              exit 2
            fi
          '

    - name: 케이스 생성
      id: generate-cases
      shell: bash
      env:
        PYTHONPATH: "${{ inputs.module-path }}:${PYTHONPATH}"
      run: |
        : 케이스 생성
        set -euo pipefail

        python3 \
          "${{ github.action_path }}/generate_cases.py" \
          "$HOME/workdir" \
          "${{ inputs.total-cases }}"

    - name: 채점
      id: grade
      shell: bash
      run: |
        : 채점
        set -euo pipefail

        PASS=0

        for n in $(seq 1 ${{ inputs.total-cases }}); do

          set +e
          timeout --signal=KILL ${{ inputs.time-limit }}s \
          docker run --rm \
            --network none \
            --cpus "1.0" \
            --memory "${{ inputs.memory-limit }}" \
            --memory-swap "${{ inputs.memory-limit }}" \
            --pids-limit "128" \
            --cap-drop ALL \
            --security-opt no-new-privileges \
            --tmpfs /tmp:rw,nosuid,nodev,noexec,size=64m \
            -u "$(id -u):$(id -g)" \
            -v "$HOME/workdir":/workdir \
            -w /workdir \
            -e n="$n" \
            gcc:13 \
            bash -lc '/workdir/main < "/workdir/${n}.in" > "/workdir/${n}.out"'
          RC=$?
          set -e

          if [ ${RC} -eq 124 ]; then
            echo "::notice::[케이스 ${n}] 시공간 초과 (TMLE)"; continue
          elif [ ${RC} -eq 137 ]; then
            echo "::notice::[케이스 ${n}] 시공간 초과 (TMLE)"; continue
          elif [ ${RC} -ne 0 ]; then
            echo "::notice::[케이스 ${n}] 실행 오류 (RE)"; continue
          fi
          BYTES=$(stat -c%s "$HOME/workdir/${n}.out")
          if [ "$BYTES" -gt ${{ inputs.output-limit }} ]; then
            echo "::notice::[케이스 ${n}] 출력 초과 (OLE)"; continue
          fi

          set +e
          python3 \
            "${{ github.action_path }}/compare.py" \
            "$HOME/workdir/${n}.ans" \
            "$HOME/workdir/${n}.out"
          CMP=$?
          set -e

          if [ $CMP -eq 0 ]; then
            echo "::notice::[케이스 ${n}] 정답 (AC)"; PASS=$((PASS+1))
          elif [ $CMP -eq 1 ]; then
            echo "::notice::[케이스 ${n}] 오답 (WA)"; continue
          elif [ $CMP -eq 2 ]; then
            echo "::notice::[케이스 ${n}] 형식 오류 (PE)"; continue
          else
            echo "::notice::[케이스 ${n}] 내부 오류 (IE)"; continue
          fi

        done

        echo "::notice::Points ${PASS}/${{ inputs.total-cases }}"

        python3 generate_result.py "${{ inputs.total-cases }}" "${PASS}"
        echo "results=$(jq -c . results.json | base64 -w0)" >> $GITHUB_OUTPUT

    - name: 리포트
      id: reporter
      uses: classroom-resources/autograding-grading-reporter@v1
      env:
        GRADE_RESULTS: "${{ steps.grade.outputs.result }}"
      with:
        runners: grade
